#include "analyser.h"

/*
 * 表达式分析函数
 * 算符优先表
 * +-----------------------------------------+
 * +|     | ( | ) | + | - | * | / | > | < | >= | <= | != | == | 前置- |函数调用| as | 
 * +|------------------------------------------------------------------------------+
 * +| (   | <.| =.| <.| <.|
 * +-------------------------------------------------------------------------------+
 * +| )   |
 * +-------------------------------------------------------------------------------+
 * +| +   |
 * +-------------------------------------------------------------------------------+
 * +| -   |
 * +-------------------------------------------------------------------------------+
 * +| *   |
 * +-------------------------------------------------------------------------------+
 * +| /   |
 * +-------------------------------------------------------------------------------+
 * +| >   |
 * +-------------------------------------------------------------------------------+
 * +| <   |
 * +-------------------------------------------------------------------------------+
 * +| >=  |
 * +-------------------------------------------------------------------------------+
 * +| <=  |
 * +-------------------------------------------------------------------------------+
 * +| !=  |
 * +-------------------------------------------------------------------------------+
 * +| ==  |
 * +-------------------------------------------------------------------------------+
 * +|前置-|
 * +-------------------------------------------------------------------------------+
 * +|函数 |
 * +-------------------------------------------------------------------------------+
 * +| as  |
 * +-------------------------------------------------------------------------------+
 * 表达式执行完成后，结果一定在栈顶
 */

void expr(VaribleTable &vt, FunctionTable &ft, Function &fn)
{

}
void operator_expr(VaribleTable &vt, FunctionTable &ft, Function &fn)
{

}
void negate_expr(VaribleTable &vt, FunctionTable &ft, Function &fn)
{

}
void assign_expr(VaribleTable &vt, FunctionTable &ft, Function &fn)
{

}
void as_expr(VaribleTable &vt, FunctionTable &ft, Function &fn)
{

}
void call_expr(VaribleTable &vt, FunctionTable &ft, Function &fn)
{

}
void literal_expr(VaribleTable &vt, FunctionTable &ft, Function &fn)
{

}
void ident_expr(VaribleTable &vt, FunctionTable &ft, Function &fn)
{

}
void group_expr(VaribleTable &vt, FunctionTable &ft, Function &fn)
{

}
